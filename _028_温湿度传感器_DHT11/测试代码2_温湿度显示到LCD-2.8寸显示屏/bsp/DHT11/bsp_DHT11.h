#ifndef __BSP_DHT11_H
#define __BSP_DHT11_H
/***********************************************************************************************************************************
 **【文件名称】  bsp_DHT11.h
 **【功能测试】  DHT11-温湿度获取
 **【购买链接】  魔女科技   https://demoboard.taobao.com
 **【更新分享】  Q群文件夹
 ***********************************************************************************************************************************
 **【文件名称】  bsp_DHT11.h
 **【功能描述】  定义引脚、定义全局结构体、声明全局函数
 **
 **【适用平台】  STM32F103 + 标准库v3.5 + keil5
 **
 **【实验操作】  1-模块接线，VCC  接 3.3V 或 5V
 **                          DATA 接 PC3
 **                          GND  接 GND
 **
 **【划 重 点】  1-电压范围：3.3V~5.0V，工作电流：0.2~1mA; 待机电流：150uA
 **              2-DHT11反应有点慢：上电后1S后进入稳定状态; 
 **              3-采样周期，不同店家的DHT11，参数不同，一般是1次/秒, 有部分可以数百毫秒间隔采集一次; 当小于采样周期进行重复采集数据，会发生错误;
 **              5-DHT11时序要求较高，us级别，当使用delay粗略延时，同一份代码同一个模块，在不同keil里跑也可能发生错误(代码优化设置对while延时的影响)。建议使用TIM的精准延时;
 **              4-注意判断使用的DHT11器件，是单独的DHT11元件，还是完整的DHT11模块
 **                单独的DHT11元件：蓝色塑料主体、三个引脚，不带上拉电阻；适合低成本工程方案使用，建议测试时引脚使用推挽输出模式；
 **                完整的DTH11模块：蓝色塑料主体、三个引脚、PCB底板、上拉电阻、电源指示LED，适合方案搭建；
 **              6-精度误差：DHT11分旧版和新版，10元内的绝大部分是旧版，新版约12元左右；
 **                          旧版数据稳定，但只有整数部分，新版有小数部分，但数据跳动稍大；
 **                          温度0-50°C; 精度±2°C; 小数部份无效
 **                          湿度20-80%; 精度±5%; 小数部分无效
 **
 **
 **【文件移植】  步骤1-复制文件：可复制bsp_DHT11.c和bsp_DHT11h两个文件，或复制DHT11文件夹，保存到所需工程目录文件夹下；
 **              步骤2-添加文件：在keil工各程左侧文件管理器中，双击某文件夹，以添加bsp_DHT11.c文件;
 **              步骤3-添加路径：点击魔术棒工具按钮，在“c/c++"选项页中，点击”Include Path"后面的按键，以添加文件存放所在路径(是文件夹，不是文件);
 **　　　　　    步骤4-添加引脚：在所需DHT11功能的代码文件头部，添加：#include "bsp_DHT11.h";
 **
 **
 **【函数使用】  函数2-DHT11_GetData(GPIOx, GPIO_Pin_x);           // 获取数据, 获取的数据存放于结构体xDHT11中，具体使用方法，可参考示例代码
 **
 **
 **【更新记录】  2022-05-13  增加TIM2精准延时，以便于移植
 **              2021-12-23  修改初始化函数，使文件移植更方便: DHT11_Init(GPIOx, GPIO_Pin_x);
 **              2021-10-26  修改c和h文件文件格式
 **              2021-10-26  修改DHT11_GetData()函数
 **              2021-05-20  创建文件
 **
***********************************************************************************************************************************/
#include <stm32f10x.h>
#include <stdio.h>



/*****************************************************************************
 ** 移植修改
****************************************************************************/
#define   DELAY_MODE_TIM2   1     // 采用TIM2精准延时，以避免while粗略延时误判时序; 
                                  // 0_使用粗略延时：注意本代码是在勾选下列参数状态下调试的：Options / C++ /One ELF Section per Function ;
                                  // 1_使用TIM2计时：首选推荐; 注意同一工程中是否有其它功能使用TIM2，以免发生冲突;



/*****************************************************************************
 ** 声明 全局变量
****************************************************************************/
typedef struct
{
    float          Temperature;   // 温度值：在调用DHT11_GetTemp()函数后，获取到的温度值；
    float          Humidity;      // 湿度值：在调用DHT11_GetTemp()函数后，获取到的温度值；
} xDHT11_TypeDef;
extern xDHT11_TypeDef  xDHT11;    // 声明全局结构体, 用于存放读取的结果值



/*****************************************************************************
 ** 声明  全局函数
****************************************************************************/
uint8_t DHT11_GetData(GPIO_TypeDef *GPIOx, uint32_t PINx);
float DHT11_GetTemperature(GPIO_TypeDef *GPIOx, uint32_t PINx);
float DHT11_GetHumidity(GPIO_TypeDef *GPIOx, uint32_t PINx);

#endif 





